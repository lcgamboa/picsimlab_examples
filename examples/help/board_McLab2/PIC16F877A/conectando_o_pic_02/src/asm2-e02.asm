; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                   CONECTANDO O PIC - RECURSOS AVAN«ADOS                 *
; *                               EXEMPLO 2                                 *
; *                                                                         *
; *                NICOL¡S C…SAR LAVINIA e DAVID JOS… DE SOUZA              *
; *                                                                         *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *   VERS√O : 2.0                                                          *
; *     DATA : 24/02/2003                                                   *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                             DESCRI«√O GERAL                             *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ESTE EXEMPLO FOI PREPARADO PARA DEMONSTRAR O FUNCIONAMENTO DO TIMER DE 
;  16 BITS DO PIC (TMR1) E DA VARREDURA DE DISPLAYS.
;  CONSISTE NUM TEMPORIZADOR DE SEGUNDOS. DOIS BOT’ES FORAM UTILIZADOS PARA
;  PROGRAMAR O TEMPO DA CONTAGEM. UM OUTRO BOT√O FOI UTILIZADO PARA DISPARAR
;  O CONTADOR. O TEMPORIZADOR CONSEGUE CONTAR AT… 9999 SEGUNDOS, DE FORMA QUE
;  OS 4 DISPLAYS DE 7 SEGMENTOS FORAM NECESS¡RIOS. A CONTAGEM … REGRESSIVA.
;  UM LED INDICA QUE O TEMPORIZADOR EST¡ OPERANDO. QUANDO O SISTEMA CHEGA
;  A 0000 (ZERO) O LED … DESLIGADO AUTOMATICAMENTE.
;
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                         CONFIGURA«’ES PARA GRAVA«√O                     *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

 __CONFIG _CP_OFF & _CPD_OFF & _DEBUG_OFF & _LVP_OFF & _WRT_OFF & _BODEN_OFF & _PWRTE_ON & _WDT_ON & _XT_OSC

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                            DEFINI«√O DAS VARI¡VEIS                      *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  O PRIMEIRO BLOCO DE VARI¡VEIS EST¡ LOCALIZADO LOGO NO INÕCIO DO BANCO 0

	CBLOCK	0X20			; POSI«√O INICIAL DA RAM

		UNIDADE			; (LSD)
		DEZENA			; 
		CENTENA			;
		MILHAR			; (MSD)
 
		FILTRO_BOTOES		; FILTRO PARA RUIDOS

		TEMPO_TURBO		; TEMPORIZADOR P/ TURBO DAS TECLAS

		INDICE_VARRE_DISPLAY	; INDEXADOR P/ VARREDURA DOS DISPLAYS

		DIVISOR_TMR1		; CONTADOR AUXILIAR P/ SEGUNDOS

	ENDC

;  O SEGUNDO BLOCO DE VARI¡VEIS EST¡ LOCALIZADO NO FINAL DO BANCO 0, A PARTIR
;  DO ENDERE«O 0X70, POIS ESTA LOCALIZA«√O … ACESSADA DE QUALQUER BANCO,
;  FACILITANDO A OPERA«√O COM AS VARI¡VEIS AQUI LOCALIZADAS.

	CBLOCK	0X70			; REGI√O COMUM A TODOS OS BANCOS

		STATUS_TEMP		; REGISTRADOR DE STATUS TEMPOR¡RIO
		WORK_TEMP		; REGISTRADOR DE TRABALHO TEMPOR¡RIO
		FSR_TEMP		; REG. DE ENDERECO INDIRETO TEMPOR¡RIO
		PCLATH_TEMP		; REGISTRADOR DE PAGINA«√O TEMPOR¡RIO
	ENDC

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                DEFINI«√O DAS VARI¡VEIS INTERNAS DO PIC                  *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  O ARQUIVO DE DEFINI«’ES DO PIC UTILIZADO DEVE SER REFERENCIADO PARA QUE
;  OS NOMES DEFINIDOS PELA MICROCHIP POSSAM SER UTILIZADOS, SEM A NECESSIDADE
;  DE REDIGITA«√O.

	#INCLUDE <P16F877A.INC>		; ARQUIVO DE DEFINI«’ES DO PIC ATUAL

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                      DEFINI«√O DOS BANCOS DE RAM                        *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  OS PSEUDOS-COMANDOS "BANK0" E "BANK1", AQUI DEFINIDOS, AJUDAM A COMUTAR
;  ENTRE OS BANCOS DE MEM”RIA.

#DEFINE	BANK1	BSF	STATUS,RP0 	; SELECIONA BANK1 DA MEMORIA RAM
#DEFINE	BANK0	BCF	STATUS,RP0	; SELECIONA BANK0 DA MEMORIA RAM

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                           CONSTANTES INTERNAS                           *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  A DEFINI«√O DE CONSTANTES FACILITA A PROGRAMA«√O E A MANUTEN«√O.

FILTRO_TECLA	EQU	.200		; FILTRO P/ EVITAR RUIDOS DOS BOT’ES
TURBO_TECLA	EQU	.70		; TEMPORIZADOR P/ TURBO DAS TECLAS

TMR1_HIGH	EQU	HIGH (.65536-.62500)
TMR1_LOW	EQU	LOW  (.65536-.62500)	; VALOR PARA CONTAGEM DE
						; 62500 CICLOS DE CONTAGEM
						; DO TMR1 (PROGRAMADO P/
						; PRESCALER DE 1:8)

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                    DECLARA«√O DOS FLAGs DE SOFTWARE                    *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  A DEFINI«√O DE FLAGs AJUDA NA PROGRAMA«√O E ECONOMIZA MEM”RIA RAM.

;  ESTE PROGRAMA N√O UTILIZA NENHUM FLAG DE USU¡RIO

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                                ENTRADAS                                 *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  AS ENTRADAS DEVEM SER ASSOCIADAS A NOMES PARA FACILITAR A PROGRAMA«√O E
;  FUTURAS ALTERA«’ES DO HARDWARE.

#DEFINE	BT_UP		PORTB,1		; ESTADO DO BOT√O 1
					; 1 -> LIBERADO
					; 0 -> PRESSIONADO

#DEFINE	BT_DOWN		PORTB,2		; ESTADO DO BOT√O 2
					; 1 -> LIBERADO
					; 0 -> PRESSIONADO

#DEFINE	BT_START_STOP	PORTB,3		; ESTADO DO BOT√O 3
					; 1 -> LIBERADO
					; 0 -> PRESSIONADO

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                                 SAÕDAS                                  *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  AS SAÕDAS DEVEM SER ASSOCIADAS A NOMES PARA FACILITAR A PROGRAMA«√O E
;  FUTURAS ALTERA«’ES DO HARDWARE.

#DEFINE	ESTADO_TIMER	PORTB,0		; LED DE ESTADO DO TIMER
					; (FUNCIONA TAMB…M COMO FLAG)
					; 1 -> TIMER CONTANDO
					; 0 -> TIMER PARADO

#DEFINE	MUX		PORTB		; MUX PARA ACIONAMENTO DOS DISPLAYS
					; (DE RB4 AT… RB7)

#DEFINE	SEGMENTOS	PORTD		; SEGMENTOS DOS DISPLAYS

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                   VETOR DE RESET DO MICROCONTROLADOR                    *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  POSI«√O INICIAL PARA EXECU«√O DO PROGRAMA

	ORG	0X0000			; ENDERE«O DO VETOR DE RESET
	GOTO	CONFIG_			; PULA PARA CONFIG DEVIDO A REGI√O
					; DESTINADA ¿S INTERRUP«’ES

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                           VETOR DE INTERRUP«√O                          *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  POSI«√O DE DESVIO DO PROGRAMA QUANDO UMA INTERRUP«√O ACONTECE

	ORG	0X0004			; ENDERE«O DO VETOR DE INTERRUP«√O

;  … MUITO IMPORTANTE QUE OS REGISTRADORES PRIORIT¡RIOS AO FUNCIONAMENTO DA
;  M¡QUINA, E QUE PODEM SER ALTERADOS TANTO DENTRO QUANTO FORA DAS INTS SEJAM
;  SALVOS EM REGISTRADORES TEMPOR¡RIOS PARA PODEREM SER POSTERIORMENTE
;  RECUPERADOS.

SALVA_CONTEXTO
	MOVWF	WORK_TEMP		; SALVA REGISTRADOR DE TRABALHO E 
	SWAPF	STATUS,W		; DE STATUS DURANTE O TRATAMENTO 
	MOVWF	STATUS_TEMP		; DA INTERRUP«√O.
	MOVF	FSR,W
	MOVWF	FSR_TEMP		; SALVA REGISTRADOR FSR
	MOVF	PCLATH,W
	MOVWF	PCLATH_TEMP		; SALVA REGISTRADOR PCLATH

	CLRF	PCLATH			; LIMPA REGISTRADOR PCLATH
					; (SELECIONA P¡GINA 0)
	CLRF	STATUS			; LIMPA REGISTRADOR STATUS
					; (SELECIONA BANCO 0)

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                 TESTA QUAL INTERRUP«√O FOI SOLICITADA                   *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  TESTA O FLAG DAS INTERRUP«’ES PARA SABER PARA QUAL ROTINA DESVIAR.

	BTFSS	INTCON,T0IF		; FOI INTERRUP«√O DE TMR0 ?
	GOTO	INT_TMR1		; N√O - ENT√O PULA P/ INT_TMR1
					; SIM

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                    TRATAMENTO DA INTERRUP«√O DE TIMER 0                 *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA PARA EXECUTAR AS A«’ES NECESS¡RIAS SEMPRE QUE A INTERRUP«√O
;  ACONTECE. NESTE CASO, A INTERRUP«√O ESTA SENDO UTILIZADA PARA GERAR A
;  FREQ‹ NCIA DE VARREDURA DOS DISPLAYS. POR ISSO, CADA VEZ QUE ELA ACONTECER,
;  O PR”XIMO DISPLAY SER¡ ACIONADO.

INT_TMR0
	INCF	INDICE_VARRE_DISPLAY,F	; INCR. O ÕNDICE DE VAR. DOS DISPLAYS

	MOVLW	B'00000011'
	ANDWF	INDICE_VARRE_DISPLAY,F	; LIMITA CONTAGEM DE 0 A 3

	MOVF	INDICE_VARRE_DISPLAY,W	; CARREGA NO WORK O VALOR DO ÕNDICE
	ADDLW	UNIDADE			; SOMA ENDERE«O DO PRIMEIRO DÕGITO
	MOVWF	FSR			; SALVA RESULTADO NO FSR, APONTANDO
					; PARA O ENDERE«O DO DÕGITO ATUAL.
					; (ENDERE«AMENTO INDIRETO)

	CLRF	SEGMENTOS		; LIMPA OS SEGMENTOS (BLANK)
					; UTILIZADO P/ EVITAR SOMBRAS NOS
					; DISPLAYS

	MOVLW	B'00001111'		; PREPARA M¡SCARA
	ANDWF	MUX,F			; EXECUTA M¡SCARA (DESLIGA OS DISP.)

	MOVF	INDICE_VARRE_DISPLAY,W	; SALVA NO WORK O VALOR DO ÕNDICE
	CALL	TABELA_MUX		; CONSULTA TABELA MUX
	IORWF	MUX,F			; ATUALIZA MUX, SELECIONANDO O
					; DISPLAYS CORRETO PARA O MOMENTO

	GOTO	$+1			; DELAY DE 2US
					; (TEMPO DE RESPOSTA DO TRANSISTOR)

	MOVF	INDF,W			; RECUPERA NO WORK O VALOR DO DÕGITO
	CALL	TABELA_DISPLAY_7_SEG	; CONSULTA TABELA P/ DISPLAYS
	MOVWF	SEGMENTOS		; ATUALIZA OS SEGMENTOS, ESCREVENDO
					; O VALOR DO DÕGITO CORRETO (PORTD)

SAI_INT_TMR0
	BCF	INTCON,T0IF		; LIMPA FLAG DA INTERRUP«√O DE TMR0
	GOTO	SAI_INT			; PULA P/ SAI_INT

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                    TRATAMENTO DA INTERRUP«√O DE TIMER 1                 *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA PARA EXECUTAR AS A«’ES NECESS¡RIAS SEMPRE QUE A INTERRUP«√O
;  ACONTECE. NESTE CASO, A INTERRUP«√O ESTA SENDO UTILIZADA PARA CONTAR O
;  TEMPO DO TEMPORIZADOR. POR ISSO, CADA VEZ QUE ELA ACONTECER O VALOR DO
;  TIMER SER¡ DECREMENTADO, CASO J¡ TENHA SE PASSADO 1SEG. 
;  PERIODO DA INTERRUP«√O: 1US (CICLO DE MAQUINA) * 8 (PRESCALER DO TMR1) *
; 			   * 62500 (CONTAGEM DO TMR1) = 0,5SEG.

INT_TMR1
	MOVLW	TMR1_HIGH
	MOVWF	TMR1H
	MOVLW	TMR1_LOW
	MOVWF	TMR1L			; RECARREGA CONTADOR DO TMR1
					; PERIODICIDADE DE 0,5SEG.

	DECFSZ	DIVISOR_TMR1,F		; PASSOU-SE 1 SEGUNDO ?
	GOTO	SAI_INT_TMR1		; N√O - ENT√O SAI DA INTERRUP«√O
					; SIM
	MOVLW	.2
	MOVWF	DIVISOR_TMR1		; RECARREGA CONTADOR DE 1SEG.

	CALL	DECREMENTA_TIMER	; DECREMENTA O VALOR DO TIMER

	MOVF	UNIDADE,F
	BTFSS	STATUS,Z
	GOTO	SAI_INT_TMR1
	MOVF	DEZENA,F
	BTFSS	STATUS,Z
	GOTO	SAI_INT_TMR1
	MOVF	CENTENA,F
	BTFSS	STATUS,Z
	GOTO	SAI_INT_TMR1
	MOVF	MILHAR,F
	BTFSS	STATUS,Z		; FINAL DA CONTAGEM ? (TIMER=0?)
	GOTO	SAI_INT_TMR1		; N√O - SAI DA INTERRUP«√O
					; SIM
	BCF	ESTADO_TIMER		; DESLIGA LED DE TIMER OPERANDO
	BCF	T1CON,TMR1ON		; PARALIZA CONTADOR DO TMR1

SAI_INT_TMR1
	BCF	PIR1,TMR1IF		; LIMPA FLAG DA INTERRUP«√O DE TMR1

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                           SAÕDA DA INTERRUP«√O                          *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ANTES DE SAIR DA INTERRUP«√O, O CONTEXTO SALVO NO INÕCIO DEVE SER
;  RECUPERADO PARA QUE O PROGRAMA N√O SOFRA ALTERA«’ES INDESEJADAS.

SAI_INT
	MOVF	PCLATH_TEMP,W
	MOVWF	PCLATH			; RECUPERA REG. PCLATH (PAGINA«√O)
	MOVF	FSR_TEMP,W
	MOVWF	FSR			; RECUPERA REG. FSR (END. INDIRETO)
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS			; RECUPERA REG. STATUS
	SWAPF	WORK_TEMP,F
	SWAPF	WORK_TEMP,W		; RECUPERA REG. WORK
	RETFIE				; RETORNA DA INTERRUP«√O (HABILITA GIE)

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                 TABELA PARA OS DISPLAYS DE 7 SEGMENTOS                  *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA PARA CONVERS√O DO VALOR N⁄M…RICO DO DÕGITO EM RELA«√O AOS SEGMENTOS
;  QUE DEVEM SER ACESOS E APAGADOS NO DISPLAY

TABELA_DISPLAY_7_SEG
	ANDLW	B'00001111'		; EXECUTA MASCARA P/ EVITAR PULOS ERRADOS
	ADDWF	PCL,F			; SOMA DESLOCAMENTO AO PROGRAM COUNTER,
					; GERANDO UMA TABELA DO TIPO "CASE".
;	          PGFEDCBA		; POSI«√O RELATIVA AOS SEGMENTOS
	RETLW	B'00111111'		; 0H - 0
	RETLW	B'00000110'		; 1H - 1
	RETLW	B'01011011'		; 2H - 2
	RETLW	B'01001111'		; 3H - 3
	RETLW	B'01100110'		; 4H - 4
	RETLW	B'01101101'		; 5H - 5
	RETLW	B'01111101'		; 6H - 6
	RETLW	B'00000111'		; 7H - 7
	RETLW	B'01111111'		; 8H - 8
	RETLW	B'01101111'		; 9H - 9
	RETLW	B'00000000'		; AH - BLANK
	RETLW	B'00000000'		; BH - BLANK
	RETLW	B'00000000'		; CH - BLANK
	RETLW	B'00000000'		; DH - BLANK
	RETLW	B'00000000'		; EH - BLANK
	RETLW	B'00000000'		; FH - BLANK

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                 TABELA PARA ACIONAMENTO DOS DISPLAYS                    *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA PARA CONVERTER O DÕGITO ATUAL EM RELA«√O AO PORT QUE DEVE SER
;  LIGADO PARA ACIONAMENTO DO DISPLAY RELACIONADO.

TABELA_MUX
	ADDWF	PCL,F			; SOMA DESLOCAMENTO AO PROGRAM COUNTER
					; GERANDO UMA TABELA DO TIPO "CASE".
	RETLW	B'00010000'		; 0 - ACIONA DISPLAY 0
	RETLW	B'00100000'		; 1 - ACIONA DISPLAY 1
	RETLW	B'01000000'		; 2 - ACIONA DISPLAY 2
	RETLW	B'10000000'		; 2 - ACIONA DISPLAY 3

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *              ROTINA PARA INCREMENTAR O VALOR DO TIMER (BCD)             *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA UTILIZADA PARA INCREMENTAR O VALOR DOS REGISTRADORES UNIDADE,
;  DEZENA, CENTENA E MILHAR, QUE S√O OS CONTADORES DO TIMER. A CONTAGEM …
;  FEITA DIRETAMENTE EM BCD.

INCREMENTA_TIMER
	INCF	UNIDADE,F		; INCREMENTA UNIDADE

	MOVLW	.10
	XORWF	UNIDADE,W
	BTFSS	STATUS,Z		; UNIDADE = 10 ?
	RETURN				; N√O - RETORNA
					; SIM
	CLRF	UNIDADE			; ZERA A UNIDADE
	INCF	DEZENA,F		; INCREMENTA A DEZENA

	MOVLW	.10
	XORWF	DEZENA,W
	BTFSS	STATUS,Z		; DEZENA = 10 ?
	RETURN				; N√O - RETORNA
					; SIM
	CLRF	DEZENA			; ZERA A DEZENA
	INCF	CENTENA,F		; INCREMENTA A CENTENA

	MOVLW	.10
	XORWF	CENTENA,W
	BTFSS	STATUS,Z		; CENTENA = 10 ?
	RETURN				; N√O - RETORNA
					; SIM
	CLRF	CENTENA			; ZERA A CENTENA
	INCF	MILHAR,F		; INCREMENTA O MILHAR

	MOVLW	.10
	XORWF	MILHAR,W
	BTFSC	STATUS,Z		; MILHAR = 10 ?
	CLRF	MILHAR			; SIM - ZERA MILHAR
	RETURN				; N√O - RETORNA

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *              ROTINA PARA DECREMENTAR O VALOR DO TIMER (BCD)             *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ROTINA UTILIZADA PARA DECREMENTAR O VALOR DOS REGISTRADORES UNIDADE,
;  DEZENA, CENTENA E MILHAR, QUE S√O OS CONTADORES DO TIMER. A CONTAGEM …
;  FEITA DIRETAMENTE EM BCD.

DECREMENTA_TIMER
	DECF	UNIDADE,F		; INCREMENTA UNIDADE

	MOVLW	0XFF
	XORWF	UNIDADE,W
	BTFSS	STATUS,Z		; UNIDADE = 0XFF ?
	RETURN				; N√O - RETORNA
					; SIM
	MOVLW	.9
	MOVWF	UNIDADE			; CARREGA UNIDADE COM 9
	DECF	DEZENA,F		; DECREMENTA A DEZENA

	MOVLW	0XFF
	XORWF	DEZENA,W
	BTFSS	STATUS,Z		; DEZENA = 0XFF ?
	RETURN				; N√O - RETORNA
					; SIM
	MOVLW	.9
	MOVWF	DEZENA			; CARREGA A DEZENA COM 9
	DECF	CENTENA,F		; DECREMENTA A CENTENA

	MOVLW	0XFF
	XORWF	CENTENA,W
	BTFSS	STATUS,Z		; CENTENA = 0XFF ?
	RETURN				; N√O - RETORNA
					; SIM
	MOVLW	.9
	MOVWF	CENTENA			; CARREGA CENTENA COM 9
	DECF	MILHAR,F		; DECREMENTA O MILHAR

	MOVLW	0XFF
	XORWF	MILHAR,W
	BTFSS	STATUS,Z		; MILHAR = 0XFF ?
	RETURN				; N√O - RETORNA
					; SIM
	MOVLW	.9
	MOVWF	MILHAR			; CARREGA O MILHAR COM 9
	RETURN				; RETORNA

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                CONFIGURA«’ES INICIAIS DE HARDWARE E SOFTWARE            *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  NESTA ROTINA S√O INICIALIZADAS AS PORTAS DE I/O DO MICROCONTROLADOR E AS
;  CONFIGURA«’ES DOS REGISTRADORES ESPECIAIS (SFR). A ROTINA INICIALIZA A
;  M¡QUINA E AGUARDA O ESTOURO DO WDT.

CONFIG_
	CLRF	PORTA			; GARANTE TODAS AS SAÕDAS EM ZERO
	CLRF	PORTB
	CLRF	PORTC
	CLRF	PORTD
	CLRF	PORTE

	BANK1				; SELECIONA BANCO 1 DA RAM

	MOVLW	B'11111111'
	MOVWF	TRISA			; CONFIGURA I/O DO PORTA

	MOVLW	B'00001110'
	MOVWF	TRISB			; CONFIGURA I/O DO PORTB

	MOVLW	B'11111111'
	MOVWF	TRISC			; CONFIGURA I/O DO PORTC

	MOVLW	B'00000000'
	MOVWF	TRISD			; CONFIGURA I/O DO PORTD

	MOVLW	B'00000111'
	MOVWF	TRISE			; CONFIGURA I/O DO PORTE

	MOVLW	B'11011111'
	MOVWF	OPTION_REG		; CONFIGURA OPTIONS
					; PULL-UPs DESABILITADOS
					; INTER. NA BORDA DE SUBIDA DO RB0
					; TIMER0 INCREM. PELO CICLO DE M¡QUINA
					; WDT   - 1:128
					; TIMER0- 1:1
					
	MOVLW	B'01100000'		
	MOVWF	INTCON			; CONFIGURA INTERRUP«’ES
					; HABILITADA A INTERRUP«√O DE TIMER0
					; HABILITA AS INTERRUP«’ES DE PERIF…RICO

	MOVLW	B'00000001'
	MOVWF	PIE1			; CONFIGURA INTERRUP«’ES DE PERIFI…RICOS
					; HABILITADA A INTERRUP«√O DE TMR1
	MOVLW	B'00000111'
	MOVWF	ADCON1			; CONFIGURA CONVERSOR A/D
					; CONFIGURA PORTA E PORTE COMO I/O DIGITAL

	BANK0				; SELECIONA BANCO 0 DA RAM

	MOVLW	B'00110000'
	MOVWF	T1CON			; CONFIGURA TMR1
					; PRESCALER -> 1:8
					; INCREMENTADO PELO CICLO DE M¡QUINA

;  AS INSTRU«’ES A SEGUIR FAZEM COM QUE O PROGRAMA TRAVE QUANDO HOUVER UM
;  RESET OU POWER-UP, MAS PASSE DIRETO SE O RESET FOR POR WDT. DESTA FORMA,
;  SEMPRE QUE O PIC … LIGADO, O PROGRAMA TRAVA, AGUARDA UM ESTOURO DE WDT
;  E COME«A NOVAMENTE. ISTO EVITA PROBLEMAS NO START-UP DO PIC.

	BTFSC	STATUS,NOT_TO		; RESET POR ESTOURO DE WATCHDOG TIMER?
	GOTO	$			; N√O - AGUARDA ESTOURO DO WDT
					; SIM

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                         INICIALIZA«√O DA RAM                            *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  ESTA ROTINA IR¡ LIMPAR TODA A RAM DO BANCO 0, INDO DE 0X20 A 0X7F.
;  EM SEGUIDA, AS VARI¡VEIS DE RAM DO PROGRAMA S√O INICIALIZADAS.

	MOVLW	0X20
	MOVWF	FSR			; APONTA O ENDERE«AMENTO INDIRETO PARA
					; A PRIMEIRA POSI«√O DA RAM
LIMPA_RAM
	CLRF	INDF			; LIMPA A POSI«√O
	INCF	FSR,F			; INCREMENTA O PONTEIRO P/ A PR”X. POS.
	MOVF	FSR,W
	XORLW	0X80			; COMPARA O PONTEIRO COM A ⁄LT. POS. +1
	BTFSS	STATUS,Z		; J¡ LIMPOU TODAS AS POSI«’ES?
	GOTO	LIMPA_RAM		; N√O - LIMPA A PR”XIMA POSI«√O
					; SIM

	BCF	ESTADO_TIMER		; INICIA COM ESTADO EM OFF

	MOVLW	.2
	MOVWF	DIVISOR_TMR1		; CARREGA CONTADOR DE 1SEG.

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                          VARREDURA DOS BOT’ES                           *
; *                             LOOP PRINCIPAL                              *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  A ROTINA PRINCIPAL FICA CHECANDO O ESTADO DOS BOT’ES. CASO ALGUM SEJA
;  PRESSIONADO, A ROTINA DE TRATAMENTO DO BOT√O … CHAMADA.

	BSF	INTCON,GIE		; HABILITA AS INTERRUP«’ES
					; USADA INT. TMR0 PARA VARREDURA
					; DOS DISPLAYS

VARRE
	CLRWDT				; LIMPA WATCHDOG TIMER

	BTFSS	BT_UP			; O BOT√O DE UP EST¡ PRESSIONADO?
	GOTO	TRATA_BT_UP		; SIM - PULA P/ TRATA_BT_UP
					; N√O

	BTFSS	BT_DOWN			; O BOT√O DE DOWN EST¡ PRESSIONADO?
	GOTO	TRATA_BT_DOWN		; SIM - PULA P/ TRATA_BT_DOWN
					; N√O

	BTFSS	BT_START_STOP		; O BOT√O START/STOP EST¡ PRESSIONADO?
	GOTO	TRATA_BT_START_STOP	; SIM - PULA P/ TRATA_BT_START_STOP
					; N√O

	MOVLW	FILTRO_TECLA		; CARREGA NO WORK O VALOR DE FILTRO_TECLA
	MOVWF	FILTRO_BOTOES		; SALVA EM FILTRO_BOTOES
					; RECARREGA FILTRO P/ EVITAR RUIDOS

	MOVLW	.1
	MOVWF	TEMPO_TURBO		; CARREGA TEMPO DO TURBO DAS TECLAS
					; COM 1 - IGNORA O TURBO A PRIMEIRA
					; VEZ QUE A TECLA … PRESSIONADA

	GOTO	VARRE			; VOLTA PARA VARRER TECLADO

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                         TRATAMENTO DOS BOT’ES                           *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

; ************************* TRATAMENTO DO BOT√O DE UP ***********************

TRATA_BT_UP
	BTFSC	ESTADO_TIMER		; TIMER EST¡ PARADO ?
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM

	DECFSZ	FILTRO_BOTOES,F		; FIM DO FILTRO ? (RUIDO?)
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM - BOT√O PRESSIONADO

	DECFSZ	TEMPO_TURBO,F		; FIM DO TEMPO DE TURBO ?
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM
	MOVLW	TURBO_TECLA
	MOVWF	TEMPO_TURBO		; RECARREGA TEMPORIZADOR DO TURBO
					; DAS TECLAS

	CALL	INCREMENTA_TIMER	; INCREMENTA O VALOR DO TIMER

	GOTO	VARRE			; VOLTA P/ VARREDURA DOS BOT’ES

; ************************* TRATAMENTO DO BOT√O DE DOWN **********************

TRATA_BT_DOWN
	BTFSC	ESTADO_TIMER		; TIMER EST¡ PARADO ?
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM

	DECFSZ	FILTRO_BOTOES,F		; FIM DO FILTRO ? (RUIDO?)
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM - BOT√O PRESSIONADO

	DECFSZ	TEMPO_TURBO,F		; FIM DO TEMPO DE TURBO ?
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM
	MOVLW	TURBO_TECLA
	MOVWF	TEMPO_TURBO		; RECARREGA TEMPORIZADOR DO TURBO
					; DAS TECLAS

	CALL	DECREMENTA_TIMER	; DECREMENTA O VALOR DO TIMER

	GOTO	VARRE			; VOLTA P/ VARREDURA DOS BOT’ES

; ************************* TRATAMENTO DO BOT√O START / STOP *****************

TRATA_BT_START_STOP
	MOVF	FILTRO_BOTOES,F
	BTFSC	STATUS,Z		; FILTRO J¡ IGUAL A ZERO ?
					; (FUN«√O J¡ FOI EXECUTADA?)		
	GOTO	VARRE			; SIM - VOLTA P/ VARREDURA DO TECLADO
					; N√O

	DECFSZ	FILTRO_BOTOES,F		; FIM DO FILTRO ? (RUIDO?)
	GOTO	VARRE			; N√O - VOLTA P/ VARRE
					; SIM - BOT√O PRESSIONADO


	BTFSS	ESTADO_TIMER		; TIMER ESTA LIGADO ?
	GOTO	LIGA_TIMER		; N√O - ENT√O LIGA
					; SIM - ENT√O DESLIGA

DESLIGA_TIMER
	BCF	ESTADO_TIMER		; DESLIGA LED E FLAG DO ESTADO DO TIMER
	BCF	T1CON,TMR1ON		; PARA CONTADOR DO TMR1
	GOTO	VARRE			; VOLTA P/ VARREDURA DOS BOT’ES

LIGA_TIMER
	MOVF	UNIDADE,F
	BTFSS	STATUS,Z		; UNIDADE EST¡ ZERADA ?
	GOTO	LIGA_TIMER_2		; N√O - PULA P/ LIGA_TIMER_2
					; SIM - TESTA DEZENA
	MOVF	DEZENA,F
	BTFSS	STATUS,Z		; DEZENA EST¡ ZERADA ?
	GOTO	LIGA_TIMER_2		; N√O - PULA P/ LIGA_TIMER_2
					; SIM - TESTA CENTENA
	MOVF	CENTENA,F
	BTFSS	STATUS,Z		; CENTENA EST¡ ZERADA ?
	GOTO	LIGA_TIMER_2		; N√O - PULA P/ LIGA_TIMER_2
					; SIM - TESTA MILHAR
	MOVF	MILHAR,F
	BTFSS	STATUS,Z		; MILHAR EST¡ ZERADO ?
	GOTO	LIGA_TIMER_2		; N√O - PULA P/ LIGA_TIMER_2
	GOTO	VARRE			; SIM - VOLTA P/ VARRER TECLADO
					;       SEM LIGAR O TIMER

LIGA_TIMER_2
	BSF	ESTADO_TIMER		; LIGA LED E FLAG DO ESTADO DO TIMER

	MOVLW	TMR1_HIGH
	MOVWF	TMR1H
	MOVLW	TMR1_LOW
	MOVWF	TMR1L			; INICIALIZA CONTADORES

	MOVLW	.2
	MOVWF	DIVISOR_TMR1		; INICIALIZA DIVISOR

	BSF	T1CON,TMR1ON		; LIGA CONTAGEM DO TMR1

	GOTO	VARRE			; VOLTA P/ VARREDURA DOS BOT’ES

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; *                              FIM DO PROGRAMA                            *
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END				; FIM DO PROGRAMA

